generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts Account[]
  sessions Session[]
  miis     Mii[]
  likes    Like[]

  @@map("users")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model Mii {
  id       BigInt   @id @default(autoincrement())
  userId   String
  name     String   @db.VarChar(64)
  pictures String[]
  tags     String[]
  likes    Int      @default(0)

  createdAt DateTime @default(now())

  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  likedBy Like[]

  @@map("miis")
}

model Like {
  userId String
  miiId  BigInt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  mii  Mii  @relation(fields: [miiId], references: [id], onDelete: Cascade)

  @@id([userId, miiId])
  @@map("likes")
}
